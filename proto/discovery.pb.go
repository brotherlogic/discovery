// Code generated by protoc-gen-go.
// source: discovery.proto
// DO NOT EDIT!

/*
Package discovery is a generated protocol buffer package.

It is generated from these files:
	discovery.proto

It has these top-level messages:
	RegistryEntry
*/
package discovery

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegistryEntry struct {
	// The ip address associated with this entry
	Ip string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	// The port number assigned / requested for this entry
	Port int32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	// The name of this service
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// Is this an external facing port
	ExternalPort bool `protobuf:"varint,4,opt,name=external_port,json=externalPort" json:"external_port,omitempty"`
}

func (m *RegistryEntry) Reset()                    { *m = RegistryEntry{} }
func (m *RegistryEntry) String() string            { return proto.CompactTextString(m) }
func (*RegistryEntry) ProtoMessage()               {}
func (*RegistryEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func init() {
	proto.RegisterType((*RegistryEntry)(nil), "RegistryEntry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for DiscoveryService service

type DiscoveryServiceClient interface {
	RegisterService(ctx context.Context, in *RegistryEntry, opts ...grpc.CallOption) (*RegistryEntry, error)
	Discover(ctx context.Context, in *RegistryEntry, opts ...grpc.CallOption) (*RegistryEntry, error)
}

type discoveryServiceClient struct {
	cc *grpc.ClientConn
}

func NewDiscoveryServiceClient(cc *grpc.ClientConn) DiscoveryServiceClient {
	return &discoveryServiceClient{cc}
}

func (c *discoveryServiceClient) RegisterService(ctx context.Context, in *RegistryEntry, opts ...grpc.CallOption) (*RegistryEntry, error) {
	out := new(RegistryEntry)
	err := grpc.Invoke(ctx, "/DiscoveryService/RegisterService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryServiceClient) Discover(ctx context.Context, in *RegistryEntry, opts ...grpc.CallOption) (*RegistryEntry, error) {
	out := new(RegistryEntry)
	err := grpc.Invoke(ctx, "/DiscoveryService/Discover", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DiscoveryService service

type DiscoveryServiceServer interface {
	RegisterService(context.Context, *RegistryEntry) (*RegistryEntry, error)
	Discover(context.Context, *RegistryEntry) (*RegistryEntry, error)
}

func RegisterDiscoveryServiceServer(s *grpc.Server, srv DiscoveryServiceServer) {
	s.RegisterService(&_DiscoveryService_serviceDesc, srv)
}

func _DiscoveryService_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistryEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServiceServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DiscoveryService/RegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServiceServer).RegisterService(ctx, req.(*RegistryEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryService_Discover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistryEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServiceServer).Discover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DiscoveryService/Discover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServiceServer).Discover(ctx, req.(*RegistryEntry))
	}
	return interceptor(ctx, in, info, handler)
}

var _DiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DiscoveryService",
	HandlerType: (*DiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterService",
			Handler:    _DiscoveryService_RegisterService_Handler,
		},
		{
			MethodName: "Discover",
			Handler:    _DiscoveryService_Discover_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("discovery.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0xc9, 0x2c, 0x4e,
	0xce, 0x2f, 0x4b, 0x2d, 0xaa, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xca, 0xe1, 0xe2, 0x0d,
	0x4a, 0x4d, 0xcf, 0x2c, 0x2e, 0x29, 0xaa, 0x74, 0xcd, 0x03, 0x12, 0x42, 0x7c, 0x5c, 0x4c, 0x99,
	0x05, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x40, 0x96, 0x90, 0x10, 0x17, 0x4b, 0x41, 0x7e,
	0x51, 0x89, 0x04, 0x13, 0x50, 0x84, 0x35, 0x08, 0xcc, 0x06, 0x89, 0xe5, 0x25, 0xe6, 0xa6, 0x4a,
	0x30, 0x83, 0x55, 0x81, 0xd9, 0x42, 0xca, 0x5c, 0xbc, 0xa9, 0x15, 0x25, 0xa9, 0x45, 0x79, 0x89,
	0x39, 0xf1, 0x60, 0x0d, 0x2c, 0x40, 0x49, 0x8e, 0x20, 0x1e, 0x98, 0x60, 0x00, 0x50, 0xcc, 0xa8,
	0x94, 0x4b, 0xc0, 0x05, 0xe6, 0x80, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x63, 0x2e,
	0x7e, 0x88, 0x0b, 0x52, 0x8b, 0x60, 0x42, 0x7c, 0x7a, 0x28, 0x6e, 0x92, 0x42, 0xe3, 0x2b, 0x31,
	0x08, 0xe9, 0x70, 0x71, 0xc0, 0x0c, 0x22, 0xac, 0x3a, 0x89, 0x0d, 0xec, 0x57, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x3c, 0x3d, 0x43, 0x73, 0xfe, 0x00, 0x00, 0x00,
}
