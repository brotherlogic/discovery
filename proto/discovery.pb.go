// Code generated by protoc-gen-go. DO NOT EDIT.
// source: discovery.proto

/*
Package discovery is a generated protocol buffer package.

It is generated from these files:
	discovery.proto

It has these top-level messages:
	RegistryEntry
	ServiceList
	Empty
	StateResponse
	StateRequest
	RegisterRequest
	RegisterResponse
	DiscoverRequest
	DiscoverResponse
	ListRequest
	ListResponse
*/
package discovery

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegistryEntry struct {
	// The ip address associated with this entry
	Ip string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	// The port number assigned / requested for this entry
	Port int32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	// The name of this service
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// Is this an external facing port
	ExternalPort bool `protobuf:"varint,4,opt,name=external_port,json=externalPort" json:"external_port,omitempty"`
	// This is the machine identifier
	Identifier string `protobuf:"bytes,5,opt,name=identifier" json:"identifier,omitempty"`
	// Boolean to show we're master/slave
	Master bool `protobuf:"varint,6,opt,name=master" json:"master,omitempty"`
	// The time at which this binary was registered
	RegisterTime int64 `protobuf:"varint,7,opt,name=register_time,json=registerTime" json:"register_time,omitempty"`
	// The time at which this binary should be cleaned
	TimeToClean int64 `protobuf:"varint,8,opt,name=time_to_clean,json=timeToClean" json:"time_to_clean,omitempty"`
	// The time at which this binary was last seen
	LastSeenTime int64 `protobuf:"varint,9,opt,name=last_seen_time,json=lastSeenTime" json:"last_seen_time,omitempty"`
	// We are never going to be master
	IgnoresMaster bool `protobuf:"varint,10,opt,name=ignores_master,json=ignoresMaster" json:"ignores_master,omitempty"`
	// The time at which we were set master
	MasterTime int64 `protobuf:"varint,11,opt,name=master_time,json=masterTime" json:"master_time,omitempty"`
}

func (m *RegistryEntry) Reset()                    { *m = RegistryEntry{} }
func (m *RegistryEntry) String() string            { return proto.CompactTextString(m) }
func (*RegistryEntry) ProtoMessage()               {}
func (*RegistryEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegistryEntry) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *RegistryEntry) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *RegistryEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegistryEntry) GetExternalPort() bool {
	if m != nil {
		return m.ExternalPort
	}
	return false
}

func (m *RegistryEntry) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *RegistryEntry) GetMaster() bool {
	if m != nil {
		return m.Master
	}
	return false
}

func (m *RegistryEntry) GetRegisterTime() int64 {
	if m != nil {
		return m.RegisterTime
	}
	return 0
}

func (m *RegistryEntry) GetTimeToClean() int64 {
	if m != nil {
		return m.TimeToClean
	}
	return 0
}

func (m *RegistryEntry) GetLastSeenTime() int64 {
	if m != nil {
		return m.LastSeenTime
	}
	return 0
}

func (m *RegistryEntry) GetIgnoresMaster() bool {
	if m != nil {
		return m.IgnoresMaster
	}
	return false
}

func (m *RegistryEntry) GetMasterTime() int64 {
	if m != nil {
		return m.MasterTime
	}
	return 0
}

type ServiceList struct {
	Services []*RegistryEntry `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
}

func (m *ServiceList) Reset()                    { *m = ServiceList{} }
func (m *ServiceList) String() string            { return proto.CompactTextString(m) }
func (*ServiceList) ProtoMessage()               {}
func (*ServiceList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServiceList) GetServices() []*RegistryEntry {
	if m != nil {
		return m.Services
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type StateResponse struct {
	Counts string `protobuf:"bytes,1,opt,name=counts" json:"counts,omitempty"`
	Len    int32  `protobuf:"varint,2,opt,name=len" json:"len,omitempty"`
}

func (m *StateResponse) Reset()                    { *m = StateResponse{} }
func (m *StateResponse) String() string            { return proto.CompactTextString(m) }
func (*StateResponse) ProtoMessage()               {}
func (*StateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StateResponse) GetCounts() string {
	if m != nil {
		return m.Counts
	}
	return ""
}

func (m *StateResponse) GetLen() int32 {
	if m != nil {
		return m.Len
	}
	return 0
}

type StateRequest struct {
}

func (m *StateRequest) Reset()                    { *m = StateRequest{} }
func (m *StateRequest) String() string            { return proto.CompactTextString(m) }
func (*StateRequest) ProtoMessage()               {}
func (*StateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type RegisterRequest struct {
	Service *RegistryEntry `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	Caller  string         `protobuf:"bytes,2,opt,name=caller" json:"caller,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RegisterRequest) GetService() *RegistryEntry {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *RegisterRequest) GetCaller() string {
	if m != nil {
		return m.Caller
	}
	return ""
}

type RegisterResponse struct {
	Service *RegistryEntry `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *RegisterResponse) Reset()                    { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()               {}
func (*RegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RegisterResponse) GetService() *RegistryEntry {
	if m != nil {
		return m.Service
	}
	return nil
}

type DiscoverRequest struct {
	Request *RegistryEntry `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	Caller  string         `protobuf:"bytes,2,opt,name=caller" json:"caller,omitempty"`
}

func (m *DiscoverRequest) Reset()                    { *m = DiscoverRequest{} }
func (m *DiscoverRequest) String() string            { return proto.CompactTextString(m) }
func (*DiscoverRequest) ProtoMessage()               {}
func (*DiscoverRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DiscoverRequest) GetRequest() *RegistryEntry {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *DiscoverRequest) GetCaller() string {
	if m != nil {
		return m.Caller
	}
	return ""
}

type DiscoverResponse struct {
	Service *RegistryEntry `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *DiscoverResponse) Reset()                    { *m = DiscoverResponse{} }
func (m *DiscoverResponse) String() string            { return proto.CompactTextString(m) }
func (*DiscoverResponse) ProtoMessage()               {}
func (*DiscoverResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DiscoverResponse) GetService() *RegistryEntry {
	if m != nil {
		return m.Service
	}
	return nil
}

type ListRequest struct {
	Caller string `protobuf:"bytes,1,opt,name=caller" json:"caller,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListRequest) GetCaller() string {
	if m != nil {
		return m.Caller
	}
	return ""
}

type ListResponse struct {
	Services *ServiceList `protobuf:"bytes,1,opt,name=services" json:"services,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ListResponse) GetServices() *ServiceList {
	if m != nil {
		return m.Services
	}
	return nil
}

func init() {
	proto.RegisterType((*RegistryEntry)(nil), "discovery.RegistryEntry")
	proto.RegisterType((*ServiceList)(nil), "discovery.ServiceList")
	proto.RegisterType((*Empty)(nil), "discovery.Empty")
	proto.RegisterType((*StateResponse)(nil), "discovery.StateResponse")
	proto.RegisterType((*StateRequest)(nil), "discovery.StateRequest")
	proto.RegisterType((*RegisterRequest)(nil), "discovery.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "discovery.RegisterResponse")
	proto.RegisterType((*DiscoverRequest)(nil), "discovery.DiscoverRequest")
	proto.RegisterType((*DiscoverResponse)(nil), "discovery.DiscoverResponse")
	proto.RegisterType((*ListRequest)(nil), "discovery.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "discovery.ListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DiscoveryService service

type DiscoveryServiceClient interface {
	RegisterService(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Discover(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*DiscoverResponse, error)
	ListAllServices(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	State(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error)
}

type discoveryServiceClient struct {
	cc *grpc.ClientConn
}

func NewDiscoveryServiceClient(cc *grpc.ClientConn) DiscoveryServiceClient {
	return &discoveryServiceClient{cc}
}

func (c *discoveryServiceClient) RegisterService(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := grpc.Invoke(ctx, "/discovery.DiscoveryService/RegisterService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryServiceClient) Discover(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*DiscoverResponse, error) {
	out := new(DiscoverResponse)
	err := grpc.Invoke(ctx, "/discovery.DiscoveryService/Discover", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryServiceClient) ListAllServices(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/discovery.DiscoveryService/ListAllServices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryServiceClient) State(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error) {
	out := new(StateResponse)
	err := grpc.Invoke(ctx, "/discovery.DiscoveryService/State", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DiscoveryService service

type DiscoveryServiceServer interface {
	RegisterService(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Discover(context.Context, *DiscoverRequest) (*DiscoverResponse, error)
	ListAllServices(context.Context, *ListRequest) (*ListResponse, error)
	State(context.Context, *StateRequest) (*StateResponse, error)
}

func RegisterDiscoveryServiceServer(s *grpc.Server, srv DiscoveryServiceServer) {
	s.RegisterService(&_DiscoveryService_serviceDesc, srv)
}

func _DiscoveryService_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServiceServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discovery.DiscoveryService/RegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServiceServer).RegisterService(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryService_Discover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServiceServer).Discover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discovery.DiscoveryService/Discover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServiceServer).Discover(ctx, req.(*DiscoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryService_ListAllServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServiceServer).ListAllServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discovery.DiscoveryService/ListAllServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServiceServer).ListAllServices(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoveryService_State_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServiceServer).State(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discovery.DiscoveryService/State",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServiceServer).State(ctx, req.(*StateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "discovery.DiscoveryService",
	HandlerType: (*DiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterService",
			Handler:    _DiscoveryService_RegisterService_Handler,
		},
		{
			MethodName: "Discover",
			Handler:    _DiscoveryService_Discover_Handler,
		},
		{
			MethodName: "ListAllServices",
			Handler:    _DiscoveryService_ListAllServices_Handler,
		},
		{
			MethodName: "State",
			Handler:    _DiscoveryService_State_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discovery.proto",
}

func init() { proto.RegisterFile("discovery.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 524 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x4b, 0x6f, 0xd3, 0x40,
	0x10, 0xc7, 0xeb, 0xa4, 0x79, 0x8d, 0xf3, 0xa8, 0xf6, 0x50, 0x56, 0x41, 0x82, 0x68, 0xa1, 0x92,
	0x4f, 0x3d, 0x04, 0x2e, 0x48, 0x5c, 0xa0, 0x0d, 0xa7, 0x22, 0x21, 0xa7, 0x57, 0x64, 0x99, 0x74,
	0xa8, 0x56, 0xb2, 0xd7, 0x66, 0x77, 0x5b, 0xe1, 0xcf, 0xc4, 0x47, 0xe2, 0xcb, 0xa0, 0x7d, 0xf8,
	0x91, 0x06, 0x15, 0x89, 0xde, 0x76, 0xff, 0x3b, 0xf3, 0x9f, 0x9f, 0x67, 0x46, 0x86, 0xc5, 0x0d,
	0x57, 0xbb, 0xe2, 0x1e, 0x65, 0x75, 0x5e, 0xca, 0x42, 0x17, 0x64, 0xd2, 0x08, 0xec, 0x77, 0x0f,
	0x66, 0x31, 0xde, 0x72, 0xa5, 0x65, 0xb5, 0x11, 0x5a, 0x56, 0x64, 0x0e, 0x3d, 0x5e, 0xd2, 0x60,
	0x15, 0x44, 0x93, 0xb8, 0xc7, 0x4b, 0x42, 0xe0, 0xb8, 0x2c, 0xa4, 0xa6, 0xbd, 0x55, 0x10, 0x0d,
	0x62, 0x7b, 0x36, 0x9a, 0x48, 0x73, 0xa4, 0x7d, 0x1b, 0x65, 0xcf, 0xe4, 0x15, 0xcc, 0xf0, 0xa7,
	0x46, 0x29, 0xd2, 0x2c, 0xb1, 0x09, 0xc7, 0xab, 0x20, 0x1a, 0xc7, 0xd3, 0x5a, 0xfc, 0x62, 0x12,
	0x5f, 0x00, 0xf0, 0x1b, 0x14, 0x9a, 0x7f, 0xe7, 0x28, 0xe9, 0xc0, 0xa6, 0x77, 0x14, 0x72, 0x0a,
	0xc3, 0x3c, 0x55, 0x1a, 0x25, 0x1d, 0xda, 0x6c, 0x7f, 0x33, 0xe6, 0xd2, 0x52, 0xa2, 0x4c, 0x34,
	0xcf, 0x91, 0x8e, 0x56, 0x41, 0xd4, 0x8f, 0xa7, 0xb5, 0x78, 0xcd, 0x73, 0x24, 0x0c, 0x66, 0xe6,
	0x2d, 0xd1, 0x45, 0xb2, 0xcb, 0x30, 0x15, 0x74, 0x6c, 0x83, 0x42, 0x23, 0x5e, 0x17, 0x17, 0x46,
	0x22, 0xaf, 0x61, 0x9e, 0xa5, 0x4a, 0x27, 0x0a, 0x51, 0x38, 0xa7, 0x89, 0x73, 0x32, 0xea, 0x16,
	0x51, 0x58, 0xa7, 0x33, 0x98, 0xf3, 0x5b, 0x51, 0x48, 0x54, 0x89, 0xc7, 0x01, 0x8b, 0x33, 0xf3,
	0xea, 0x67, 0x47, 0xf5, 0x12, 0x42, 0xf7, 0xec, 0x9c, 0x42, 0xeb, 0x04, 0x4e, 0x32, 0x3e, 0xec,
	0x02, 0xc2, 0x2d, 0xca, 0x7b, 0xbe, 0xc3, 0x2b, 0xae, 0x34, 0x79, 0x0b, 0x63, 0xe5, 0xae, 0x8a,
	0x06, 0xab, 0x7e, 0x14, 0xae, 0xe9, 0x79, 0x3b, 0x9b, 0xbd, 0x31, 0xc4, 0x4d, 0x24, 0x1b, 0xc1,
	0x60, 0x93, 0x97, 0xba, 0x62, 0xef, 0x60, 0xb6, 0xd5, 0xa9, 0xc6, 0x18, 0x55, 0x59, 0x08, 0x85,
	0xa6, 0x5b, 0xbb, 0xe2, 0x4e, 0x68, 0xe5, 0xc7, 0xe5, 0x6f, 0xe4, 0x04, 0xfa, 0x19, 0x0a, 0x3f,
	0x31, 0x73, 0x64, 0x73, 0x98, 0xfa, 0xd4, 0x1f, 0x77, 0xa8, 0x34, 0xfb, 0x0a, 0x8b, 0xd8, 0xb7,
	0xce, 0x4b, 0x64, 0x0d, 0x23, 0x5f, 0xd2, 0xba, 0x3d, 0xc6, 0x56, 0x07, 0x5a, 0x80, 0x34, 0xcb,
	0x50, 0xda, 0x5a, 0x06, 0xc0, 0xde, 0xd8, 0x27, 0x38, 0x69, 0xed, 0x3d, 0xec, 0x7f, 0xf8, 0x1b,
	0xcc, 0x4b, 0x1f, 0xd3, 0xc1, 0x94, 0xee, 0xf8, 0x6f, 0x1b, 0x1f, 0xf8, 0x18, 0x66, 0x6b, 0xff,
	0x04, 0xcc, 0x33, 0x08, 0xcd, 0x7c, 0xe3, 0x83, 0x72, 0xc1, 0x5e, 0xb9, 0x8f, 0x30, 0x75, 0x61,
	0x4d, 0xa9, 0xee, 0x3a, 0x98, 0x5a, 0xa7, 0x9d, 0x5a, 0x9d, 0xc5, 0x69, 0x97, 0x61, 0xfd, 0xab,
	0xd7, 0x32, 0x57, 0x3e, 0x84, 0x5c, 0xb5, 0xd3, 0xac, 0xa5, 0xe5, 0x01, 0x75, 0xd3, 0xc2, 0xe5,
	0xf3, 0xbf, 0xbe, 0x39, 0x28, 0x76, 0x44, 0x36, 0x30, 0xae, 0x2b, 0xec, 0xd9, 0x3c, 0x98, 0xc4,
	0x9e, 0xcd, 0xc3, 0x36, 0xb2, 0x23, 0x72, 0x09, 0x0b, 0xc3, 0xfe, 0x21, 0xcb, 0x3c, 0x93, 0x22,
	0xdd, 0xcf, 0xeb, 0x34, 0x6c, 0xf9, 0xec, 0x40, 0x6f, 0x5c, 0xde, 0xc3, 0xc0, 0x2e, 0x2e, 0xe9,
	0xc6, 0x74, 0x57, 0x79, 0x49, 0x0f, 0x1f, 0xea, 0xec, 0x6f, 0x43, 0xfb, 0xbf, 0x7b, 0xf3, 0x27,
	0x00, 0x00, 0xff, 0xff, 0xc8, 0xe6, 0x2c, 0x52, 0x02, 0x05, 0x00, 0x00,
}
