syntax = "proto3";

package discovery;

option go_package = "github.com/brotherlogic/discovery/proto";

message RegistryEntry {
  // The ip address associated with this entry
  string ip = 1;
  
  // The port number assigned / requested for this entry
  int32 port = 2;
  
  // The name of this service
  string name = 3;
  
  // Is this an external facing port
  bool external_port = 4;
  
  // This is the machine identifier
  string identifier = 5;
  
  // Boolean to show we're master/slave
  bool master = 6;
  bool weak_master = 12;
  
  // The time at which this binary was registered
  int64 register_time = 7;
  
  // The time at which this binary should be cleaned
  int64 time_to_clean = 8;
  
  // The time at which this binary was last seen
  int64 last_seen_time = 9;
  
  // We are never going to be master
  bool ignores_master = 10;
  
  // The time at which we were set master
  int64 master_time = 11;

  enum Version {
    V1 = 0;
    V2 = 1;
  }

  Version version = 13;
}

message ServiceList {
        repeated RegistryEntry services = 1;
}

message Empty {}

message StateResponse {
  int64 longest_call = 1;
  string most_frequent = 2;
  int32 frequency = 3;
  string count = 4;
}

message StateRequest {
}

message RegisterRequest {
  RegistryEntry service = 1;
  string caller = 2;

  bool fanout = 4;
}

message RegisterResponse {
  RegistryEntry service = 1;
}

message DiscoverRequest {
  RegistryEntry request = 1;
  string caller = 2;
}

message DiscoverResponse {
  RegistryEntry service = 1;
}

message ListRequest {
  string caller = 1;
}

message ListResponse {
  ServiceList services = 1;
}

service DiscoveryService {
  rpc RegisterService (RegisterRequest) returns (RegisterResponse) {}
  rpc Discover (DiscoverRequest) returns (DiscoverResponse) {}
  rpc ListAllServices (ListRequest) returns (ListResponse) {}
  rpc State (StateRequest) returns (StateResponse) {}
}

message GetRequest {
  string job = 1;
  string server = 2;
  string friend = 3;
}

message GetResponse {
  repeated RegistryEntry services = 1;
}

message UnregisterRequest{
  RegistryEntry service = 1;
  string address = 3;
  
  bool fanout = 2;
}

message UnregisterResponse {}

message LockRequest{
  string job = 1;
  int64 lock_key = 2;
  string requestor = 3;
}

message LockResponse{
}


message MasterRequest {
  RegistryEntry service = 1;
  int64 lock_key = 2;
  bool master_elect = 3;
  bool fanout = 4;
}

message MasterResponse {
  RegistryEntry service = 1;
}



service DiscoveryServiceV2 {
  rpc Lock(LockRequest) returns (LockResponse) {}
  rpc RegisterV2(RegisterRequest) returns (RegisterResponse) {}
  rpc Get(GetRequest) returns (GetResponse) {}
  rpc Unregister(UnregisterRequest) returns (UnregisterResponse) {}
  rpc MasterElect(MasterRequest) returns (MasterResponse) {}
}